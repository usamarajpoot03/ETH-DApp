{"version":3,"sources":["components/navbar.jsx","components/not-found.jsx","components/homepage.jsx","components/LoadingSpinner.js","components/dexTokens.jsx","components/BuyTokensForm.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Fragment","className","to","id","NotFound","HomePage","LoadingSpinner","style","textAlign","this","props","msg","Spinner","animation","role","Component","DeXTokens","state","loaded","addressToWhiteList","tokenSaleAddress","tokensCount","totalSupply","componentDidMount","a","console","log","web3","Web3","givenProvider","eth","getAccounts","accounts","net","getId","networkId","myTokenInstance","Contract","MyToken","abi","networks","address","myTokenSaleInstance","MyTokenSale","kycInstance","KYCContract","getTotalSupply","tokenTransferListner","setState","getTokensOfUser","alert","error","handleInputChange","event","target","value","type","checked","name","handleKYCWhiteListing","methods","setKycCompleted","send","from","balanceOf","call","tokens","events","Transfer","on","buyTokens","utils","toWei","Container","Row","Col","float","Badge","variant","Form","inline","Group","controlId","Label","Control","onChange","placeholder","Button","onClick","md","span","offset","Card","width","Header","as","ListGroup","Item","React","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5a314e7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\n//stateless functional component\r\nconst Navbar = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <nav className=\"navbar navbar-expand-lg navbar-expand navbar-light bg-light\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          ETH DApp\r\n        </Link>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" to=\"/dexTokens\">\r\n                deX Tokens\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nconst NotFound = () => {\r\n  return <div>Not Found</div>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { Component } from \"react\";\r\n\r\nconst HomePage = () => {\r\n  return <div>Welcome</div>;\r\n};\r\n\r\nexport default HomePage;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nclass LoadingSpinner extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{textAlign:\"center\"}}>\r\n        <h5>{this.props.msg}</h5>\r\n        <Spinner animation=\"border\" role=\"status\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Card,\r\n  Col,\r\n  ListGroup,\r\n  Form,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport MyToken from \"../contracts/MyToken.json\";\r\nimport MyTokenSale from \"../contracts/MyTokenSale.json\";\r\nimport KYCContract from \"../contracts/KYCContract.json\";\r\nimport Web3 from \"web3\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport BuyTokensForm from \"./BuyTokensForm\";\r\n\r\nclass DeXTokens extends React.Component {\r\n  state = {\r\n    loaded: false,\r\n    addressToWhiteList: \"\",\r\n    tokenSaleAddress: null,\r\n    tokensCount: 0,\r\n    totalSupply: 0,\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    console.log(\"componentDidMount\");\r\n    try {\r\n      // Get network provider and this.web3 instance.\r\n      this.web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n\r\n      this.myTokenInstance = new this.web3.eth.Contract(\r\n        MyToken.abi,\r\n        MyToken.networks[this.networkId] &&\r\n          MyToken.networks[this.networkId].address\r\n      );\r\n\r\n      this.myTokenSaleInstance = new this.web3.eth.Contract(\r\n        MyTokenSale.abi,\r\n        MyTokenSale.networks[this.networkId] &&\r\n          MyTokenSale.networks[this.networkId].address\r\n      );\r\n\r\n      this.kycInstance = new this.web3.eth.Contract(\r\n        KYCContract.abi,\r\n        KYCContract.networks[this.networkId] &&\r\n          KYCContract.networks[this.networkId].address\r\n      );\r\n\r\n      // Set this.web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.getTotalSupply();\r\n      this.tokenTransferListner();\r\n      console.log(\"setting state\");\r\n\r\n      this.setState(\r\n        {\r\n          loaded: true,\r\n          tokenSaleAddress: MyTokenSale.networks[this.networkId].address,\r\n        },\r\n        this.getTokensOfUser\r\n      );\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load this.web3, accounts, or contract. Check console for details.`\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleKYCWhiteListing = async () => {\r\n    await this.kycInstance.methods\r\n      .setKycCompleted(this.state.addressToWhiteList)\r\n      .send({ from: this.accounts[0] });\r\n    alert(\r\n      \"Successfully added : \" + this.state.addressToWhiteList + \" in whitelist\"\r\n    );\r\n  };\r\n\r\n  getTokensOfUser = async () => {\r\n    const tokens = await this.myTokenInstance.methods\r\n      .balanceOf(this.accounts[0])\r\n      .call();\r\n    this.setState({\r\n      tokensCount: tokens,\r\n    });\r\n    this.getTotalSupply();\r\n  };\r\n\r\n  getTotalSupply = async () => {\r\n    const totalSupply = await this.myTokenInstance.methods.totalSupply().call();\r\n    console.log(\"totalSupply : \" + totalSupply);\r\n    this.setState({\r\n      totalSupply: totalSupply,\r\n    });\r\n  };\r\n\r\n  tokenTransferListner = () => {\r\n    this.myTokenInstance.events\r\n      .Transfer({ to: this.accounts[0] })\r\n      .on(\"data\", this.getTokensOfUser);\r\n  };\r\n\r\n  buyTokens = async () => {\r\n    await this.myTokenSaleInstance.methods.buyTokens(this.accounts[0]).send({\r\n      from: this.accounts[0],\r\n      value: this.web3.utils.toWei(\"1\", \"wei\"),\r\n    });\r\n  };\r\n  render() {\r\n    if (!this.state.loaded) {\r\n      return (\r\n        <LoadingSpinner msg=\"Loading Web3, Accounts and Contract...\"></LoadingSpinner>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Row className=\"RowSpacing\">\r\n            <Col>\r\n              <h5 style={{ float: \"left\" }}>\r\n                <Badge variant=\"secondary\">\r\n                  Total Supply ( no of tokens ) : {this.state.totalSupply}\r\n                </Badge>\r\n              </h5>\r\n              <div style={{ float: \"right\" }}>\r\n                <Form inline>\r\n                  <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Account Address : </Form.Label>\r\n\r\n                    <Form.Control\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.addressToWhiteList}\r\n                      type=\"text\"\r\n                      name=\"addressToWhiteList\"\r\n                      placeholder=\"0x23AEFD3A3454556456324323434D\"\r\n                    />\r\n                    <Button\r\n                      variant=\"info\"\r\n                      type=\"button\"\r\n                      onClick={this.handleKYCWhiteListing}\r\n                    >\r\n                      Add\r\n                    </Button>\r\n                  </Form.Group>\r\n                </Form>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row className=\"RowSpacing\">\r\n            <Col md={{ span: 6, offset: 3 }}>\r\n              <Card style={{ width: \"100%\" }}>\r\n                <Card.Header as=\"h5\">\r\n                  You currently own : {this.state.tokensCount} Token(s)\r\n                </Card.Header>\r\n                <ListGroup variant=\"flush\">\r\n                  <ListGroup.Item>\r\n                    <h6>\r\n                      If you want to buy tokens you can send Ether ( wei ) to\r\n                      this address :\r\n                      <Badge variant=\"light\">\r\n                        {this.state.tokenSaleAddress}\r\n                      </Badge>\r\n                    </h6>\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n              </Card>\r\n              <Button\r\n                style={{ float: \"left\" }}\r\n                type=\"button\"\r\n                onClick={this.buyTokens}\r\n                variant=\"light\"\r\n              >\r\n                Buy Tokens{\" \"}\r\n              </Button>\r\n              <Button variant=\"light\" style={{ float: \"right\" }}>\r\n                {\" \"}\r\n                Sell Tokens\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeXTokens;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nclass BuyTokensForm extends Component {\r\n  render() {\r\n    return (\r\n      <Button style={{ float: \"left\" }} type=\"button\" onClick={this.props.buyTokens}>\r\n        Buy Tokens{\" \"}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BuyTokensForm;\r\n","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport \"./App.css\";\nimport Navbar from \"./components/navbar\";\nimport NotFound from \"./components/not-found\";\nimport HomePage from \"./components/homepage\";\nimport DeXTokens from \"./components/dexTokens\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Switch>\n          <Route path=\"/dexTokens\" component={DeXTokens}></Route>\n          <Route path=\"/not-found\" component={NotFound}></Route>\n          <Route path=\"/\" exact component={HomePage}></Route>\n          <Redirect to=\"/not-found\"> </Redirect>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>{\" \"}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}